import QuoteRepos
from aiogram import Bot, Dispatcher, executor, types
import random
import UsersRepos

quotes_comments = [
    "–í–æ—Ç —á—Ç–æ –º—ã –Ω–∞—à–ª–∏:",
    "–ö–∞–∫ –º–µ—Ç–∫–æ —Å–∫–∞–∑–∞–Ω–Ω–æ:",
    "–°–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ –º—ã –Ω–∞—à–ª–∏!",
    "–ü—Ä—è–º –≤ —Ç–æ—á–∫—É...",
    "–≠—Ç–æ —Ç–æ —á—Ç–æ –º—ã –∏—Å–∫–∞–ª–∏!",
    "–í—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —ç—Ç–æ...",
    "–í–æ—Ç! –û—Ç–ª–∏—á–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞:",
    "–°–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–∫ –ø–æ–≤–µ–∑–ª–æ:"
]


async def send_hello(message: types.Message):
    if UsersRepos.ensure_subscribe_user(message.chat.id):
        await message.answer(
            text="*–£—Ä–∞!*\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º - /help\n–ò–ª–∏ –ø–æ–∏—â–µ–º —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ - /random",
            reply_markup=get_menu_buttons())
    else:
        await message.answer(
            text="*–£—Ä–∞!*\n–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã!\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º - /help\n–ò–ª–∏ –ø–æ–∏—â–µ–º —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ - /random",
            reply_markup=get_menu_buttons())


async def send_help(message: types.Message):
    await message.answer(text="""
    –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ü–∏—Ç–∞—Ç—É –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É, –¥–ª—è üåÖ —Ñ–æ—Ç–æ  –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º ‚ù§Ô∏è –∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü. —Å–µ—Ç—è—Ö, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–∑–Ω–∞—Ç—å –¥–ª—è —Å–µ–±—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ. üîé

‚öí–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –ø–∞—Ä—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —è –Ω–∞—á–Ω—É –ø–æ–∏—Å–∫!
–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ–ª–Ω—Ü–µ

‚úîÔ∏è–¢–∞–∫ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ üîå
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  üè†
/random - –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ ‚ôªÔ∏è
/help - –ü–æ–º–æ—â—å ‚úèÔ∏è

@AlexChous
    """, reply_markup=get_menu_button())


async def send_list(message: types.Message, query: str, id: int = 0):
    header = f"{random.choice(quotes_comments)}\n"
    content = None
    keyboard = None
    picture_url = ""
    list_length = 1
    if query is "random":
        content_dict = await QuoteRepos.get_random()
        content = content_dict["content"]
        themes = content_dict["themes"]
        if themes is not None:
            picture_url = await QuoteRepos.get_picture_by_themes(themes)
        keyboard = get_move_buttons("random")
    elif query == 'saves':
        content_dict = UsersRepos.get_user_saves(message.chat.id)
        content_dict = [i[0] for i in content_dict]
        if len(content_dict) == 0:
            header = "–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏."
            content = "..."
            keyboard = get_menu_button()
        else:
            content = content_dict[id]
            list_length = len(content_dict)
            keyboard = get_move_buttons(query="saves", id=id, is_last=list_length - 1 == id, saves=True)
    elif query == 'instagram':
        content_dict = QuoteRepos.get_for_instagram()

    else:
        try:
            content_list = await QuoteRepos.search(query)
        except QuoteRepos.SearchError as err:
            await message.answer(f"_–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É_ *'{err.message}'*", reply_markup=get_menu_button())
            return
        content = content_list[id]["content"]
        themes = content_list[id]["themes"]
        if themes is not None:
            picture_url = await QuoteRepos.get_picture_by_themes(themes)
        list_length = len(content_list)
        keyboard = get_move_buttons(query=query, id=id, is_last=list_length - 1 == id)

    if message.from_user.is_bot:
        await message.edit_text(text=f'_{header}_*"{content}"*\n_{id + 1}/{list_length}_[‚ÅØ]({picture_url})',
                                reply_markup=keyboard)
    else:
        await message.answer(text=f'_{header}_*"{content}"*\n_{id + 1}/{list_length}_[‚ÅØ]({picture_url}',
                             reply_markup=keyboard)


async def send_main_menu(message: types.Message):
    await message.answer(text="*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*", reply_markup=get_menu_buttons())


async def click_main_menu(message: types.Message):
    await message.edit_text(text="*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*", reply_markup=get_menu_buttons())


async def click_random(call: types.CallbackQuery):
    await call.answer(text="–ò–¥–µ—Ç –ø–æ–∏—Å–∫...")
    await send_list(message=call.message, query="random")


async def click_search(message: types.Message):
    await message.edit_text(text="–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ—Å–∏–∫, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ø–∞—Ä—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n_–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ–ª–Ω—Ü–µ_",
                            reply_markup=get_menu_buttons())


async def click_save(call: types.CallbackQuery):
    await call.answer(text="–°–æ—Ö—Ä–∞–Ω—è–µ–º...")
    content = call.message.text
    content = content.split('"')[1].split('"')[0]
    UsersRepos.add_to_saves(call.message.chat.id, save=content)


async def click_delete(call: types.CallbackQuery):
    await call.answer(text="–£–¥–∞–ª—è–µ–º...")
    content = call.message.text
    content = content.split('"')[1].split('"')[0]
    UsersRepos.try_delete_user_save(chat_id=call.message.chat.id, save=content)
    await click_saves(call.message)


async def click_saves(message: types.Message):
    await send_list(message=message, query="saves")


def get_menu_button():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
    )
    return keyboard


def get_menu_buttons():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="random"),
        types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ —Ü–∏—Ç–∞—Ç—É", callback_data="search"),
        types.InlineKeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="saves"),
        types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –º–µ–Ω—é", callback_data="close_menu")
    )
    return keyboard


def get_move_buttons(query: str, id: int = 0, is_last: bool = False, saves=False):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    if id > 0 and not is_last:
        keyboard.add(types.InlineKeyboardButton(text="–ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f'move_back[{query};{id}]'),
                     types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è", callback_data=f'move_next[{query};{id}]'))
    elif id > 0:
        keyboard.add(types.InlineKeyboardButton(text="–ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f'move_back[{query};{id}]'))
    elif not is_last:
        keyboard.add(types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è", callback_data=f'move_next[{query};{id}]'))
    if not saves:
        keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"save"))
    else:
        keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö", callback_data="delete"))
    keyboard.add(types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu"))
    return keyboard


async def move_button_click(call: types.CallbackQuery):
    args = call.data[10:-1].split(";")
    direction = call.data[5:9]
    query = args[0]
    if query == "random":
        await click_random(call)
        return
    id = int(args[1])
    if direction == "back":
        id -= 1
    elif direction == "next":
        id += 1
    await send_list(message=call.message, query=query, id=id)


async def send_admin_on_subscribe(message: types.Message):
    await message.bot.send_message(chat_id=1029619116,
                                   text=f"{message.from_user.full_name} ({message.chat.id}) subscribed!")
